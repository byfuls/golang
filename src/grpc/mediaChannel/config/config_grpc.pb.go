// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MediaChannelLauncherClient is the client API for MediaChannelLauncher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaChannelLauncherClient interface {
	LaunchMediaChannel(ctx context.Context, in *MediaChannelRequest, opts ...grpc.CallOption) (*MediaChannelResponse, error)
	StreamMediaChannel(ctx context.Context, in *MediaChannelStreamRequestMessage, opts ...grpc.CallOption) (MediaChannelLauncher_StreamMediaChannelClient, error)
}

type mediaChannelLauncherClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaChannelLauncherClient(cc grpc.ClientConnInterface) MediaChannelLauncherClient {
	return &mediaChannelLauncherClient{cc}
}

func (c *mediaChannelLauncherClient) LaunchMediaChannel(ctx context.Context, in *MediaChannelRequest, opts ...grpc.CallOption) (*MediaChannelResponse, error) {
	out := new(MediaChannelResponse)
	err := c.cc.Invoke(ctx, "/config.mediaChannelLauncher/LaunchMediaChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaChannelLauncherClient) StreamMediaChannel(ctx context.Context, in *MediaChannelStreamRequestMessage, opts ...grpc.CallOption) (MediaChannelLauncher_StreamMediaChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaChannelLauncher_ServiceDesc.Streams[0], "/config.mediaChannelLauncher/StreamMediaChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaChannelLauncherStreamMediaChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaChannelLauncher_StreamMediaChannelClient interface {
	Recv() (*MediaChannelStreamResponseMessage, error)
	grpc.ClientStream
}

type mediaChannelLauncherStreamMediaChannelClient struct {
	grpc.ClientStream
}

func (x *mediaChannelLauncherStreamMediaChannelClient) Recv() (*MediaChannelStreamResponseMessage, error) {
	m := new(MediaChannelStreamResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaChannelLauncherServer is the server API for MediaChannelLauncher service.
// All implementations must embed UnimplementedMediaChannelLauncherServer
// for forward compatibility
type MediaChannelLauncherServer interface {
	LaunchMediaChannel(context.Context, *MediaChannelRequest) (*MediaChannelResponse, error)
	StreamMediaChannel(*MediaChannelStreamRequestMessage, MediaChannelLauncher_StreamMediaChannelServer) error
	mustEmbedUnimplementedMediaChannelLauncherServer()
}

// UnimplementedMediaChannelLauncherServer must be embedded to have forward compatible implementations.
type UnimplementedMediaChannelLauncherServer struct {
}

func (UnimplementedMediaChannelLauncherServer) LaunchMediaChannel(context.Context, *MediaChannelRequest) (*MediaChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchMediaChannel not implemented")
}
func (UnimplementedMediaChannelLauncherServer) StreamMediaChannel(*MediaChannelStreamRequestMessage, MediaChannelLauncher_StreamMediaChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMediaChannel not implemented")
}
func (UnimplementedMediaChannelLauncherServer) mustEmbedUnimplementedMediaChannelLauncherServer() {}

// UnsafeMediaChannelLauncherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaChannelLauncherServer will
// result in compilation errors.
type UnsafeMediaChannelLauncherServer interface {
	mustEmbedUnimplementedMediaChannelLauncherServer()
}

func RegisterMediaChannelLauncherServer(s grpc.ServiceRegistrar, srv MediaChannelLauncherServer) {
	s.RegisterService(&MediaChannelLauncher_ServiceDesc, srv)
}

func _MediaChannelLauncher_LaunchMediaChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaChannelLauncherServer).LaunchMediaChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.mediaChannelLauncher/LaunchMediaChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaChannelLauncherServer).LaunchMediaChannel(ctx, req.(*MediaChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaChannelLauncher_StreamMediaChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MediaChannelStreamRequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaChannelLauncherServer).StreamMediaChannel(m, &mediaChannelLauncherStreamMediaChannelServer{stream})
}

type MediaChannelLauncher_StreamMediaChannelServer interface {
	Send(*MediaChannelStreamResponseMessage) error
	grpc.ServerStream
}

type mediaChannelLauncherStreamMediaChannelServer struct {
	grpc.ServerStream
}

func (x *mediaChannelLauncherStreamMediaChannelServer) Send(m *MediaChannelStreamResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

// MediaChannelLauncher_ServiceDesc is the grpc.ServiceDesc for MediaChannelLauncher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaChannelLauncher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.mediaChannelLauncher",
	HandlerType: (*MediaChannelLauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchMediaChannel",
			Handler:    _MediaChannelLauncher_LaunchMediaChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMediaChannel",
			Handler:       _MediaChannelLauncher_StreamMediaChannel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}
