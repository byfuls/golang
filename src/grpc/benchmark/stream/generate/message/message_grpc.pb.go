// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageStreamClient is the client API for MessageStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageStreamClient interface {
	StreamWriter(ctx context.Context, opts ...grpc.CallOption) (MessageStream_StreamWriterClient, error)
}

type messageStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageStreamClient(cc grpc.ClientConnInterface) MessageStreamClient {
	return &messageStreamClient{cc}
}

func (c *messageStreamClient) StreamWriter(ctx context.Context, opts ...grpc.CallOption) (MessageStream_StreamWriterClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageStream_ServiceDesc.Streams[0], "/message.MessageStream/StreamWriter", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageStreamStreamWriterClient{stream}
	return x, nil
}

type MessageStream_StreamWriterClient interface {
	Send(*ReqPkt) error
	CloseAndRecv() (*ResPkt, error)
	grpc.ClientStream
}

type messageStreamStreamWriterClient struct {
	grpc.ClientStream
}

func (x *messageStreamStreamWriterClient) Send(m *ReqPkt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageStreamStreamWriterClient) CloseAndRecv() (*ResPkt, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResPkt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageStreamServer is the server API for MessageStream service.
// All implementations should embed UnimplementedMessageStreamServer
// for forward compatibility
type MessageStreamServer interface {
	StreamWriter(MessageStream_StreamWriterServer) error
}

// UnimplementedMessageStreamServer should be embedded to have forward compatible implementations.
type UnimplementedMessageStreamServer struct {
}

func (UnimplementedMessageStreamServer) StreamWriter(MessageStream_StreamWriterServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWriter not implemented")
}

// UnsafeMessageStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageStreamServer will
// result in compilation errors.
type UnsafeMessageStreamServer interface {
	mustEmbedUnimplementedMessageStreamServer()
}

func RegisterMessageStreamServer(s grpc.ServiceRegistrar, srv MessageStreamServer) {
	s.RegisterService(&MessageStream_ServiceDesc, srv)
}

func _MessageStream_StreamWriter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageStreamServer).StreamWriter(&messageStreamStreamWriterServer{stream})
}

type MessageStream_StreamWriterServer interface {
	SendAndClose(*ResPkt) error
	Recv() (*ReqPkt, error)
	grpc.ServerStream
}

type messageStreamStreamWriterServer struct {
	grpc.ServerStream
}

func (x *messageStreamStreamWriterServer) SendAndClose(m *ResPkt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageStreamStreamWriterServer) Recv() (*ReqPkt, error) {
	m := new(ReqPkt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageStream_ServiceDesc is the grpc.ServiceDesc for MessageStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageStream",
	HandlerType: (*MessageStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWriter",
			Handler:       _MessageStream_StreamWriter_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
